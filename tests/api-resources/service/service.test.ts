// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import Authelete3_0 from 'authelete-3.0';

const client = new Authelete3_0({ baseURL: process.env['TEST_API_BASE_URL'] ?? 'http://127.0.0.1:4010' });

describe('resource service', () => {
  // Prism tests are disabled
  test.skip('createService', async () => {
    const responsePromise = client.service.createService();
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  // Prism tests are disabled
  test.skip('createService: request options and params are passed correctly', async () => {
    // ensure the request options are being passed correctly by passing an invalid HTTP method in order to cause an error
    await expect(
      client.service.createService(
        {
          accessTokenDuration: 3600,
          accessTokenForExternalAttachmentEmbedded: true,
          accessTokenSignAlg: 'NONE',
          accessTokenSignatureKeyId: 'accessTokenSignatureKeyId',
          accessTokenType: 'Bearer',
          allowableClockSkew: 0,
          attributes: [
            { key: 'attribute1-key', value: 'attribute1-value' },
            { key: 'attribute2-key', value: 'attribute2-value' },
          ],
          authenticationCallbackApiKey: 'authenticationCallbackApiKey',
          authenticationCallbackApiSecret: 'authenticationCallbackApiSecret',
          authenticationCallbackEndpoint: 'https://example.com',
          authorityHints: ['string'],
          authorizationEndpoint: 'https://my-service.example.com/authz',
          authorizationResponseDuration: 0,
          authorizationSignatureKeyId: 'authorizationSignatureKeyId',
          backchannelAuthenticationEndpoint: 'https://example.com',
          backchannelAuthReqIdDuration: 0,
          backchannelBindingMessageRequiredInFapi: true,
          backchannelPollingInterval: 0,
          backchannelUserCodeParameterSupported: true,
          claimShortcutRestrictive: true,
          clientIdAliasEnabled: true,
          cnonceDuration: 0,
          credentialDuration: 0,
          credentialIssuerMetadata: {
            authorizationServer: 'authorizationServer',
            batchCredentialEndpoint: 0,
            credentialEndpoint: true,
            credentialIssuer: 'credentialIssuer',
            credentialsSupported: true,
            deferredCredentialEndpoint: 'deferredCredentialEndpoint',
          },
          credentialJwks: 'credentialJwks',
          credentialJwksUri: 'credentialJwksUri',
          credentialOfferDuration: 0,
          credentialTransactionDuration: 0,
          dcrDuplicateSoftwareIdBlocked: true,
          dcrScopeUsedAsRequestable: true,
          description: 'description',
          deviceAuthorizationEndpoint: 'https://example.com',
          deviceFlowCodeDuration: 0,
          deviceFlowPollingInterval: 0,
          deviceVerificationUri: 'https://example.com',
          deviceVerificationUriComplete: 'https://example.com',
          directAuthorizationEndpointEnabled: true,
          directIntrospectionEndpointEnabled: true,
          directJwksEndpointEnabled: true,
          directRevocationEndpointEnabled: true,
          directTokenEndpointEnabled: true,
          directUserInfoEndpointEnabled: true,
          dpopNonceDuration: 0,
          dpopNonceRequired: true,
          dynamicRegistrationSupported: true,
          endSessionEndpoint: 'https://example.com',
          errorDescriptionOmitted: true,
          errorUriOmitted: true,
          fapiModes: ['FAPI1_ADVANCED'],
          federationConfigurationDuration: 0,
          federationEnabled: true,
          federationJwks: 'federationJwks',
          federationRegistrationEndpoint: 'federationRegistrationEndpoint',
          federationSignatureKeyId: 'federationSignatureKeyId',
          frontChannelRequestObjectEncryptionRequired: true,
          grantManagementActionRequired: true,
          grantManagementEndpoint: 'grantManagementEndpoint',
          hsks: [
            {
              handle: 'handle',
              hsmName: 'hsmName',
              kid: 'kid',
              kty: 'kty',
              publicKey: 'publicKey',
              use: 'use',
            },
          ],
          hsmEnabled: true,
          idTokenAudType: 'idTokenAudType',
          idTokenDuration: 0,
          idTokenReissuable: true,
          idTokenSignatureKeyId: 'idTokenSignatureKeyId',
          introspectionEndpoint: 'https://my-service.example.com/introspection',
          introspectionSignatureKeyId: 'introspectionSignatureKeyId',
          issSuppressed: true,
          issuer: 'https://my-service.example.com',
          jwks: 'jwks',
          jwksUri: 'https://example.com',
          jwtGrantByIdentifiableClientsOnly: true,
          jwtGrantEncryptedJwtRejected: true,
          jwtGrantUnsignedJwtRejected: true,
          loopbackRedirectionUriVariable: true,
          metadata: [{ key: 'key', value: 'value' }],
          missingClientIdAllowed: true,
          mtlsEndpointAliases: [{ name: 'name', uri: 'https://example.com' }],
          mutualTlsValidatePkiCertChain: true,
          nbfOptional: true,
          openidDroppedOnRefreshWithoutOfflineAccess: true,
          organizationName: 'organizationName',
          parRequired: true,
          pkceRequired: true,
          pkceS256Required: true,
          policyUri: 'https://example.com',
          preAuthorizedGrantAnonymousAccessSupported: true,
          predefinedTransformedClaims: 'predefinedTransformedClaims',
          pushedAuthReqDuration: 0,
          pushedAuthReqEndpoint: 'https://example.com',
          refreshTokenDuration: 3600,
          refreshTokenDurationKept: true,
          refreshTokenDurationReset: true,
          refreshTokenIdempotent: true,
          refreshTokenKept: true,
          registrationEndpoint: 'https://example.com',
          registrationManagementEndpoint: 'https://example.com',
          requestObjectAudienceChecked: true,
          requestObjectEncryptionAlgMatchRequired: true,
          requestObjectEncryptionEncMatchRequired: true,
          requestObjectRequired: true,
          resourceSignatureKeyId: 'resourceSignatureKeyId',
          revocationEndpoint: 'https://my-service.example.com/revocation',
          rsResponseSigned: true,
          scopeRequired: true,
          serviceDocumentation: 'https://example.com',
          serviceName: 'My service',
          signedJwksUri: 'signedJwksUri',
          singleAccessTokenPerSubject: true,
          supportedAttachments: ['EMBEDDED'],
          supportedAuthorizationDetailsTypes: ['string'],
          supportedBackchannelTokenDeliveryModes: ['PING'],
          supportedClaimLocales: ['string'],
          supportedClaims: ['string'],
          supportedClaimTypes: ['NORMAL'],
          supportedClientRegistrationTypes: ['AUTOMATIC'],
          supportedCustomClientMetadata: ['string'],
          supportedDigestAlgorithms: ['string'],
          supportedDisplays: ['PAGE'],
          supportedDocuments: ['string'],
          supportedDocumentsCheckMethods: ['string'],
          supportedDocumentsMethods: ['string'],
          supportedDocumentsValidationMethods: ['string'],
          supportedDocumentsVerificationMethods: ['string'],
          supportedElectronicRecords: ['string'],
          supportedEvidence: ['string'],
          supportedGrantTypes: ['AUTHORIZATION_CODE', 'REFRESH_TOKEN'],
          supportedIdentityDocuments: ['string'],
          supportedIntrospectionAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedPromptValues: ['NONE'],
          supportedResponseTypes: ['CODE'],
          supportedRevocationAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedScopes: [
            {
              attributes: [{ key: 'key', value: 'value' }],
              defaultEntry: false,
              description: 'A permission to read your timeline.',
              descriptions: [{ tag: 'tag', value: 'value' }],
              name: 'timeline.read',
            },
            {
              attributes: [{ key: 'key', value: 'value' }],
              defaultEntry: false,
              description: 'A permission to read your history.',
              descriptions: [{ tag: 'tag', value: 'value' }],
              name: 'history.read',
            },
          ],
          supportedServiceProfiles: ['FAPI'],
          supportedTokenAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedTrustFrameworks: ['string'],
          supportedUiLocales: ['string'],
          supportedVerificationMethods: ['string'],
          supportedVerifiedClaims: ['string'],
          tlsClientCertificateBoundAccessTokens: true,
          tokenEndpoint: 'https://my-service.example.com/token',
          tokenExchangeByConfidentialClientsOnly: true,
          tokenExchangeByIdentifiableClientsOnly: true,
          tokenExchangeByPermittedClientsOnly: true,
          tokenExchangeEncryptedJwtRejected: true,
          tokenExchangeUnsignedJwtRejected: true,
          tokenExpirationLinked: true,
          tosUri: 'https://example.com',
          traditionalRequestObjectProcessingApplied: true,
          trustAnchors: [{ entityId: 'entityId', jwks: 'jwks' }],
          trustedRootCertificates: ['string'],
          unauthorizedOnClientConfigSupported: true,
          userCodeCharset: 'BASE20',
          userCodeLength: 0,
          userInfoEndpoint: 'https://example.com',
          userInfoSignatureKeyId: 'userInfoSignatureKeyId',
          userPinLength: 0,
          verifiableCredentialsEnabled: true,
          verifiedClaimsValidationSchemaSet: 'standard',
        },
        { path: '/_stainless_unknown_path' },
      ),
    ).rejects.toThrow(Authelete3_0.NotFoundError);
  });

  // Prism tests are disabled
  test.skip('deleteService', async () => {
    const responsePromise = client.service.deleteService('serviceId');
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  // Prism tests are disabled
  test.skip('updateService', async () => {
    const responsePromise = client.service.updateService('serviceId');
    const rawResponse = await responsePromise.asResponse();
    expect(rawResponse).toBeInstanceOf(Response);
    const response = await responsePromise;
    expect(response).not.toBeInstanceOf(Response);
    const dataAndResponse = await responsePromise.withResponse();
    expect(dataAndResponse.data).toBe(response);
    expect(dataAndResponse.response).toBe(rawResponse);
  });

  // Prism tests are disabled
  test.skip('updateService: request options and params are passed correctly', async () => {
    // ensure the request options are being passed correctly by passing an invalid HTTP method in order to cause an error
    await expect(
      client.service.updateService(
        'serviceId',
        {
          accessTokenDuration: 3600,
          accessTokenForExternalAttachmentEmbedded: true,
          accessTokenSignAlg: 'NONE',
          accessTokenSignatureKeyId: 'accessTokenSignatureKeyId',
          accessTokenType: 'Bearer',
          allowableClockSkew: 0,
          attributes: [
            { key: 'attribute1-key', value: 'attribute1-value' },
            { key: 'attribute2-key', value: 'attribute2-value' },
          ],
          authenticationCallbackApiKey: 'authenticationCallbackApiKey',
          authenticationCallbackApiSecret: 'authenticationCallbackApiSecret',
          authenticationCallbackEndpoint: 'https://example.com',
          authorityHints: ['string'],
          authorizationEndpoint: 'https://my-service.example.com/authz',
          authorizationResponseDuration: 0,
          authorizationSignatureKeyId: 'authorizationSignatureKeyId',
          backchannelAuthenticationEndpoint: 'https://example.com',
          backchannelAuthReqIdDuration: 0,
          backchannelBindingMessageRequiredInFapi: false,
          backchannelPollingInterval: 0,
          backchannelUserCodeParameterSupported: false,
          claimShortcutRestrictive: false,
          clientIdAliasEnabled: true,
          cnonceDuration: 0,
          credentialDuration: 0,
          credentialIssuerMetadata: {
            authorizationServer: 'authorizationServer',
            batchCredentialEndpoint: 0,
            credentialEndpoint: true,
            credentialIssuer: 'credentialIssuer',
            credentialsSupported: true,
            deferredCredentialEndpoint: 'deferredCredentialEndpoint',
          },
          credentialJwks: 'credentialJwks',
          credentialJwksUri: 'credentialJwksUri',
          credentialOfferDuration: 0,
          credentialTransactionDuration: 0,
          dcrDuplicateSoftwareIdBlocked: true,
          dcrScopeUsedAsRequestable: false,
          description: 'description',
          deviceAuthorizationEndpoint: 'https://example.com',
          deviceFlowCodeDuration: 0,
          deviceFlowPollingInterval: 0,
          deviceVerificationUri: 'https://example.com',
          deviceVerificationUriComplete: 'https://example.com',
          directAuthorizationEndpointEnabled: false,
          directIntrospectionEndpointEnabled: false,
          directJwksEndpointEnabled: false,
          directRevocationEndpointEnabled: false,
          directTokenEndpointEnabled: false,
          directUserInfoEndpointEnabled: false,
          dpopNonceDuration: 0,
          dpopNonceRequired: true,
          dynamicRegistrationSupported: false,
          endSessionEndpoint: 'https://example.com',
          errorDescriptionOmitted: false,
          errorUriOmitted: false,
          fapiModes: ['FAPI1_ADVANCED'],
          federationConfigurationDuration: 0,
          federationEnabled: true,
          federationJwks: 'federationJwks',
          federationRegistrationEndpoint: 'federationRegistrationEndpoint',
          federationSignatureKeyId: 'federationSignatureKeyId',
          frontChannelRequestObjectEncryptionRequired: false,
          grantManagementActionRequired: false,
          grantManagementEndpoint: 'grantManagementEndpoint',
          hsks: [
            {
              handle: 'handle',
              hsmName: 'hsmName',
              kid: 'kid',
              kty: 'kty',
              publicKey: 'publicKey',
              use: 'use',
            },
          ],
          hsmEnabled: false,
          idTokenAudType: 'idTokenAudType',
          idTokenDuration: 0,
          idTokenReissuable: true,
          idTokenSignatureKeyId: 'idTokenSignatureKeyId',
          introspectionEndpoint: 'https://my-service.example.com/introspection',
          introspectionSignatureKeyId: 'introspectionSignatureKeyId',
          issSuppressed: false,
          issuer: 'https://my-service.example.com',
          jwks: 'jwks',
          jwksUri: 'https://example.com',
          jwtGrantByIdentifiableClientsOnly: true,
          jwtGrantEncryptedJwtRejected: true,
          jwtGrantUnsignedJwtRejected: true,
          loopbackRedirectionUriVariable: true,
          metadata: [{ key: 'key', value: 'value' }],
          missingClientIdAllowed: false,
          mtlsEndpointAliases: [{ name: 'name', uri: 'https://example.com' }],
          mutualTlsValidatePkiCertChain: false,
          nbfOptional: false,
          openidDroppedOnRefreshWithoutOfflineAccess: true,
          organizationName: 'organizationName',
          parRequired: false,
          pkceRequired: true,
          pkceS256Required: false,
          policyUri: 'https://example.com',
          preAuthorizedGrantAnonymousAccessSupported: true,
          predefinedTransformedClaims: 'predefinedTransformedClaims',
          pushedAuthReqDuration: 0,
          pushedAuthReqEndpoint: 'https://example.com',
          refreshTokenDuration: 3600,
          refreshTokenDurationKept: false,
          refreshTokenDurationReset: false,
          refreshTokenIdempotent: true,
          refreshTokenKept: false,
          registrationEndpoint: 'https://example.com',
          registrationManagementEndpoint: 'https://example.com',
          requestObjectAudienceChecked: true,
          requestObjectEncryptionAlgMatchRequired: false,
          requestObjectEncryptionEncMatchRequired: false,
          requestObjectRequired: false,
          resourceSignatureKeyId: 'resourceSignatureKeyId',
          revocationEndpoint: 'https://my-service.example.com/revocation',
          rsResponseSigned: true,
          scopeRequired: false,
          serviceDocumentation: 'https://example.com',
          serviceName: 'My updated service',
          signedJwksUri: 'signedJwksUri',
          singleAccessTokenPerSubject: false,
          supportedAttachments: ['EMBEDDED'],
          supportedAuthorizationDetailsTypes: ['string'],
          supportedBackchannelTokenDeliveryModes: ['PING'],
          supportedClaimLocales: ['string'],
          supportedClaims: ['string'],
          supportedClaimTypes: ['NORMAL'],
          supportedClientRegistrationTypes: ['AUTOMATIC'],
          supportedCustomClientMetadata: ['string'],
          supportedDigestAlgorithms: ['string'],
          supportedDisplays: ['PAGE'],
          supportedDocuments: ['string'],
          supportedDocumentsCheckMethods: ['string'],
          supportedDocumentsMethods: ['string'],
          supportedDocumentsValidationMethods: ['string'],
          supportedDocumentsVerificationMethods: ['string'],
          supportedElectronicRecords: ['string'],
          supportedEvidence: ['string'],
          supportedGrantTypes: ['AUTHORIZATION_CODE', 'REFRESH_TOKEN'],
          supportedIdentityDocuments: ['string'],
          supportedIntrospectionAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedPromptValues: ['NONE'],
          supportedResponseTypes: ['CODE'],
          supportedRevocationAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedScopes: [
            {
              attributes: [{ key: 'key', value: 'value' }],
              defaultEntry: false,
              description: 'A permission to read your history.',
              descriptions: [{ tag: 'tag', value: 'value' }],
              name: 'history.read',
            },
            {
              attributes: [{ key: 'key', value: 'value' }],
              defaultEntry: false,
              description: 'A permission to read your timeline.',
              descriptions: [{ tag: 'tag', value: 'value' }],
              name: 'timeline.read',
            },
          ],
          supportedServiceProfiles: ['FAPI'],
          supportedTokenAuthMethods: ['CLIENT_SECRET_BASIC'],
          supportedTrustFrameworks: ['string'],
          supportedUiLocales: ['string'],
          supportedVerificationMethods: ['string'],
          supportedVerifiedClaims: ['string'],
          tlsClientCertificateBoundAccessTokens: false,
          tokenEndpoint: 'https://my-service.example.com/token',
          tokenExchangeByConfidentialClientsOnly: true,
          tokenExchangeByIdentifiableClientsOnly: true,
          tokenExchangeByPermittedClientsOnly: true,
          tokenExchangeEncryptedJwtRejected: true,
          tokenExchangeUnsignedJwtRejected: true,
          tokenExpirationLinked: false,
          tosUri: 'https://example.com',
          traditionalRequestObjectProcessingApplied: false,
          trustAnchors: [{ entityId: 'entityId', jwks: 'jwks' }],
          trustedRootCertificates: ['string'],
          unauthorizedOnClientConfigSupported: false,
          userCodeCharset: 'BASE20',
          userCodeLength: 0,
          userInfoEndpoint: 'https://example.com',
          userInfoSignatureKeyId: 'userInfoSignatureKeyId',
          userPinLength: 0,
          verifiableCredentialsEnabled: true,
          verifiedClaimsValidationSchemaSet: 'standard',
        },
        { path: '/_stainless_unknown_path' },
      ),
    ).rejects.toThrow(Authelete3_0.NotFoundError);
  });
});
