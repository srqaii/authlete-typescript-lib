// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import { APIPromise } from '../../core/api-promise';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Secret extends APIResource {
  /**
   * Update the client secret of a client.
   *
   * If you want to have the Authlete server generate a new value of the client
   * secret, use `/api/client/secret/refresh` API.
   *
   * @example
   * ```ts
   * const secret = await client.client.secret.update(
   *   'clientIdentifier',
   *   {
   *     serviceId: 'serviceId',
   *     clientSecret: 'my_updated_client_secret',
   *   },
   * );
   * ```
   */
  update(
    clientIdentifier: string,
    params: SecretUpdateParams,
    options?: RequestOptions,
  ): APIPromise<SecretUpdateResponse> {
    const { serviceId, ...body } = params;
    return this._client.post(path`/api/${serviceId}/client/secret/update/${clientIdentifier}`, {
      body,
      ...options,
    });
  }

  /**
   * Refresh the client secret of a client. A new value of the client secret will be
   * generated by the Authlete server.
   *
   * If you want to specify a new value, use `/api/client/secret/update` API.
   *
   * @example
   * ```ts
   * const response = await client.client.secret.refresh(
   *   'clientIdentifier',
   *   { serviceId: 'serviceId' },
   * );
   * ```
   */
  refresh(
    clientIdentifier: string,
    params: SecretRefreshParams,
    options?: RequestOptions,
  ): APIPromise<SecretRefreshResponse> {
    const { serviceId } = params;
    return this._client.get(path`/api/${serviceId}/client/secret/refresh/${clientIdentifier}`, options);
  }
}

export interface SecretUpdateResponse {
  /**
   * The new client secret.
   */
  newClientSecret?: string;

  /**
   * The old client secret.
   */
  oldClientSecret?: string;

  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string;

  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string;
}

export interface SecretRefreshResponse {
  /**
   * The new client secret.
   */
  newClientSecret?: string;

  /**
   * The old client secret.
   */
  oldClientSecret?: string;

  /**
   * The code which represents the result of the API call.
   */
  resultCode?: string;

  /**
   * A short message which explains the result of the API call.
   */
  resultMessage?: string;
}

export interface SecretUpdateParams {
  /**
   * Path param: A service ID.
   */
  serviceId: string;

  /**
   * Body param: The new value of the client secret. Valid characters for a client
   * secret are `A-Z`, `a-z`, `0-9`, `-`, and `_`. The maximum length of a client
   * secret is 86.
   */
  clientSecret: string;
}

export interface SecretRefreshParams {
  /**
   * A service ID.
   */
  serviceId: string;
}

export declare namespace Secret {
  export {
    type SecretUpdateResponse as SecretUpdateResponse,
    type SecretRefreshResponse as SecretRefreshResponse,
    type SecretUpdateParams as SecretUpdateParams,
    type SecretRefreshParams as SecretRefreshParams,
  };
}
